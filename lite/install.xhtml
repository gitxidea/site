<!DOCTYPE html><html>
	<head>
		<title>入门指南 </title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
		<link href="default.css" rel="stylesheet" type="text/css"/>
		
		
	</head>
	<body>
		
		<style>
			.cm-lite-el{ color:#d30;}
			.cm-lite-tag{
			color:#9933FF;font-weight:bold;}
		</style>
		<script src="http://www.xidea.org/lite/codemirror/o.js"></script>
		<script src="editor.js"></script>
		<div id="main">
	<div id="header">
		<div class="logo"
onclick="location = 'http://www.xidea.org/lite/'">
			
				<div style="left:0px;top:0px;width:19px;height:100px;"> </div>
			
				<div style="left:0px;top:81px;width:42px;height:19px;"> </div>
			
				<div style="left:23px;top:0px;width:19px;height:19px;"> </div>
			
				<div style="left:23px;top:23px;width:19px;height:54px;"> </div>
			
				<div style="left:46px;top:0px;width:42px;height:19px;"> </div>
			
				<div style="left:46px;top:23px;width:19px;height:77px;"> </div>
			
				<div style="left:69px;top:81px;width:19px;height:19px;"> </div>
			
		</div>
		<h1>
			入门指南 
		</h1>
		<div class="top-box">
			<div id="i18n">
				<span class="i18n_zh"
onclick="i18n_reload(&#34;zh&#34;)">中文</span>|
				<span class="i18n_en"
onclick="i18n_reload(&#34;en&#34;)">English</span>
				<div style="display:none">
				|<input type="checkbox" id="i18n_on" checked="checked"/>
				<label for="i18n_on" title="右键点击内容片段在弹出框输入翻译">翻译</label>
				</div>
				<script>/*<![CDATA[*/var cookie = ''+document.cookie;var i18n_lang = cookie.replace(/^.*\bi18n_lang=([\w]+).*$/,'$1');if(i18n_lang == cookie){i18n_lang = 'cn'}function i18n_reload(i18n_lang){document.cookie = 'i18n_lang='+i18n_lang;location.reload();}document.getElementById('i18n').className ='i18n_'+ i18n_lang;var i18n_on = document.getElementById('i18n_on')document.body.oncontextmenu=function(event){if(i18n_on.checked ||true){var event = event || window.event;var src = event.target || event.srcElement;var id = src.getAttribute('data-i18n-key');if(id){var oldvalue = src.innerHTML;var value = prompt('更正翻译('+i18n_lang+')：',oldvalue);if(value && value != oldvalue){var data = 'i18n_action=save&i18n_id='+encodeURIComponent(id)+'&i18n_value='+encodeURIComponent(value);postData(location.href,data,function(){src.innerHTML = value;});}return false;}	}}//]]></script>
			</div>
			<div class="test"><a href="../test.xhtml">查看测试报表</a></div>
		</div>
		<div class="line"></div>
	</div>
	<div id="content">
		
		<h3>Lite模板如何安装</h3>
		<p>Lite 目前拥有Java，PHP，NodeJS三种成熟的服务端运行环境。</p>
		<p>Lite设计为跨平台效果一致，可以用JSON模拟后台数据在任何平台上测试， 为了简化环境搭建，Lite有一个模板测试专用服务器，直接通过webstart启动。</p>
		<p>
			WebStart地址：
			<a href="http://www.xidea.org/webstart/JSide.jnlp">http://www.xidea.org/webstart/JSide.jnlp</a>
		</p>
		<i>
			这是一个Java WebStart 程序，需要Java5+。安装了Java5的同学可以直接点击链接运行，否则先安装JRE吧：
		</i>
		<p>
			当能如果你有心自己搭建Apache +PHP 或者Tomcat, 或者 NodeJS，这也是允许的
			[
			<a href="#"
onclick="showNext(this,this.parentNode,&#34;展开安装说明&#34;,&#34;隐藏安装说明&#34;);return false">隐藏安装说明</a>
			]。
		</p>
		<ul style="display:block">
			<li>
				Java环境搭建
				<p>
					下载<a href="http://code.google.com/p/lite/downloads/list">Lite-YYYYMMDD.jar</a> 将其存放在WEB-INF/lib中。
					在WEB-INF/web.xml中增加配置 <strong title="class name=org.xidea.lite.servlet.TemplateServlet">servlet</strong>
					和  <strong title="一般配置为*.xhtml">servlet-mapping</strong>。
				[
					<a href="#"
onclick="showNext(this,this.parentNode,&#34;展开web.xml(Java)&#34;,&#34;隐藏web.xml(Java)&#34;);return false">展开web.xml(Java)</a>
				]</p>
				<div style="display:none">
					<div class='code'><script>renderSource("\u003cweb-app xmlns=\u0022http://java.sun.com/xml/ns/j2ee\u0022 version=\u00222.4\u0022>\u000a	\u003c!-- base info  略.... -->\u000a	\u003c!-- servlet info -->\u000a	\u003cservlet>\u000a		\u003cservlet-name>LiteXML\u003c/servlet-name>\u000a		\u003cservlet-class>org.xidea.lite.servlet.TemplateServlet\u003c/servlet-class>\u000a		\u003c!-- debug support config -->\u000a		\u003cinit-param>\u000a			\u003cparam-name>debugService\u003c/param-name>\u000a			\u003cparam-value>/.debug.xhtml\u003c/param-value>\u000a		\u003c/init-param>\u000a	\u003c/servlet>\u000a	\u003c!-- servlet mapping info -->\u000a	\u003cservlet-mapping>\u000a		\u003cservlet-name>LiteXML\u003c/servlet-name>\u000a		\u003curl-pattern>*.xhtml\u003c/url-pattern>\u000a	\u003c/servlet-mapping>\u000a	\u003c!-- other info 略.... -->\u000a	\u000a\u003c/web-app>",null,'');</script></div>
				</div>
			</li>
			<li>
				php环境搭建
				<p>下载<a href="http://code.google.com/p/lite/downloads/list"> php-example-YYYYMMDD.zip</a>。
				直接解压到能运行PHP的网站目录中即可运行(浏览example目录下的test.php文件，如果服务器超时时间太短，第一次可能无法正确输出，刷新就好了)</p>
			</li>
			<li>
				NodeJS环境搭建<a name="nodejs"></a>
				<ul>
					<li>安装：<div class='code'><script>renderSource("npm install lite",null,'');</script></div>
						<p><i>如果被墙了，也可手动下载<a href="http://code.google.com/p/lite/downloads/list"> nodelite-YYYYMMDD.tgz</a>，解压到当前目录的node_modules/目录下完成安装</i></p>
					</li>
					<li>简单测试:
						<div class='code'><script>renderSource("//启动测试服务器， 直接浏览模板，模板的同名json即模拟数据。\u000anew (require(\u0027lite\u0027).LiteEngine)(\u0027./\u0027).	startTestServer(\u0022127.0.0.1\u0022,1985);",null,'');</script></div>
					</li>
					<li>代码示例：
						<div class='code'><script>renderSource("var LiteEngine = require(\u0027lite\u0027).LiteEngine;\u000avar root =__dirname;\u000avar liteEngine = new LiteEngine(root);\u000a.....\u000a	// 传入模板路径(以\u0027/\u0027开头)，模型对象(Object描述的key->value集)，\u000a	// response 对象:用于模板渲染时输出 head(response.writeHead())/内容(response.write())\u000a	// 并结束请求(response.end())\u000a	liteEngine.render(path,data,response);\u000a	//传入模型生成函数，用于提前输出静态内容(如script标签)，优化加载性能。\u000a	liteEngine.render(path,callback,response);",null,'');</script></div>
					</li>
				</ul>
				
			</li>
			<li>
				<strong>开发期间强烈建议实用调试服务器开发测试.</strong>
			</li>
		</ul>
		<h3>如何配置</h3>
		<p>
			如果你采用的是UTF-8编码,那么你一般可以忽略掉Lite的配置(系统默认值).
			如果您希望自定义一些信息(最常见的是 ContentType输出), 那么您需要手写lite.xml文件.
			<div class='code'><script>renderSource("\u003clite encoding=\u0022utf-8\u0022>\u000a	\u003cgroup contentType=\u0022application/wml;charset=utf-8\u0022>\u000a		\u003cinclude>/*.wml\u003c/include>\u000a	\u003c/group>\u000a	\u003c!-- contentType 默认值: contentType=\u0022text/html;charset=utf-8\u0022 -->\u000a	\u003cgroup layout=\u0022/doc/guide/layout.xhtml\u0022>\u000a		\u003cinclude>/doc/guide/*.xhtml\u003c/include>\u000a		\u003cinclude>/doc/guide/*test*\u003c/include>\u000a	\u003c/group>\u000a	\u003cgroup>\u000a		\u003cinclude>/*.xhtml\u003c/include>\u000a	\u003c/group>\u000a\u003c/lite>",null,'');</script></div>
			<p>匹配规则为: 分组匹配, 匹配即退出, 后续分组再配置也无效, 属性可从上级节点继承.</p>
			<p>遍历文件时, 先 include 决定是否可能匹配, 再用exclude排除, 得出该文件最终是否匹配改组.</p>
		</p>
		<h3>调试环境如何使用</h3>
		<p>
			启动测试服务器后，有一个Lite Logo 半透明最前端显示在桌面右下角（允许拖拽），您可以选择需要测试的网站目录。选中目录后直接拖放至Logo窗口上。测试服务器自动切换网站目录，一个新的测试网站就搭建起来了。
		</p>
		<p>
			从窗口上右键菜单中点击浏览网站，在文件列表上方有一个工具栏，从中选择部署Lite示例，系统将自动部署一批比较典型的Lite模板示例。
			部署后，直接点击文件列表中的模板文件，即可自动浏览。
		</p>
	
		<div id="post">

	<div class="ds-thread"></div>
<script type="text/javascript">var duoshuoQuery = {short_name:"lite"};(function() {var ds = document.createElement('script');ds.type = 'text/javascript';ds.async = true;ds.src = 'http://static.duoshuo.com/embed.js';ds.charset = 'UTF-8';(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);})();</script>

</div>
	</div>
	<div id="footer"></div>
</div>
		<div id="menu">
	<div class="menuInner">
		<h3 c:i18n="0">入门</h3>
		<ul>
			<li>
				<a c:i18n="0_1" href="index.xhtml">Lite模板简介</a>
			</li>
			<li>
				<a c:i18n="0_2" href="install.xhtml" class=" current">测试与安装</a>
			</li>
		</ul>

		<h3 c:i18n="1">表达式参考</h3>
		<ul>
			<li>
				<a c:i18n="1_1" href="el.xhtml">什么是表达式</a>
			</li>
			<li>
				<a c:i18n="1_2" href="el-value.xhtml">变量/原子值/复合值</a>
			</li>
			<li>
				<a c:i18n="1_3" href="el-op.xhtml">操作符与函数</a>
			</li>
			<li>
				<a c:i18n="1_4" href="el-function.xhtml">内置函数参考</a>
			</li>
		</ul>

		<h3 c:i18n="2">核心模板语法参考</h3>
		<ul>
			
			<li>
				<a c:i18n="2_1" href="syntax-out.xhtml">输出语法[${},$!{},$#{},日期]</a>
			</li>
			<li>
				<a c:i18n="2_2" href="syntax-if.xhtml">条件判断[c:if]</a>
			</li>
			<li>
				<a c:i18n="2_3" href="syntax-choose.xhtml">分支选择[c:choose]</a>
			</li>
			<li>
				<a c:i18n="2_4" href="syntax-for.xhtml">四种循环[c:for]</a>
			</li>
			<li>
				<a c:i18n="2_5" href="syntax-extends.xhtml">模板继承[c:extends]</a>
			</li>
			<li>
				<a c:i18n="2_6" href="syntax-include.xhtml">静态包含[c:include]</a>
			</li>
			<li>
				<a c:i18n="2_7" href="syntax-var.xhtml">变量申明[c:var]</a>
			</li>
			<li>
				<a c:i18n="2_8" href="syntax-def.xhtml">模板函数申明[c:def]</a>
			</li>
			<li>
				<a c:i18n="2_9" href="syntax-extension.xhtml">自定义扩展[c:extension]</a>
			</li>
		</ul>

		<h3 c:i18n="3">XML/HTML相关语法参考</h3>
		<ul>
			<li>
				<a c:i18n="3_1" href="syntax-trim.xhtml">注释/语法空格控制[h:trim]</a>
			</li>
			<li>
				<a c:i18n="3_2" href="syntax-client.xhtml">前端模板函数申明[h:client]</a>
			</li>
			<li>
				<a c:i18n="3_3" href="syntax-autoform.xhtml">自动表单[h:autofrom]</a>
			</li>
			<li>
				<a c:i18n="3_4" href="feature-autoencode.xhtml">自动编码</a>
			</li>
			<li>
				<a c:i18n="3_5" href="feature-xml.xhtml" title="标记语言特有的语法，如：条件属性,自动编码,自动语义补全等...">其他特性</a>
			</li>
		</ul>
		<h3 c:i18n="4">开发调试辅助</h3>
		<ul>
			<li>
				<a c:i18n="4_1" href="debug-model.xhtml">查看数据模型</a>
			</li>
			<li>
				<a c:i18n="4_2" href="debug-log.xhtml">查看编译日志</a>
			</li>
		</ul>
		<h3 c:i18n="5">编译打包</h3>
		<ul>
			<li>
				<a c:i18n="5_1" href="compiler-cmd.xhtml">批量编译</a>
			</li>
			<li>
				<a c:i18n="5_2" href="compiler-spec.xhtml">编译规范</a>
			</li>
			<li>
				<a c:i18n="5_3" href="compiler-api.xhtml">自定义编译</a>
			</li>
		</ul>
		<h3 c:i18n="6">常见问题</h3>
		<ul>
			<li>
				<a c:i18n="6_1" href="faq-newer.xhtml">致初学者</a>
			</li>
			<li>
				<a c:i18n="6_2" href="faq-badcase.xhtml">常犯错误</a>
			</li>
			<li>
				<a c:i18n="6_3" href="faq-plan.xhtml">开发计划</a>
			</li>
		</ul>
		<h3 c:i18n="7">二次开发参考</h3>
		<ul>
			<li>
				<a c:i18n="7_1" href="dev-function.xhtml">扩展运行时函数(PHP)</a>
			</li>
			<li>
				<a c:i18n="7_2" href="dev-function.xhtml">扩展运行时函数(Java)</a>
			</li>
			<li>
				<a c:i18n="7_3" href="dev-extension.xhtml">扩展模板语法</a>
			</li>
			<li>
				<a c:i18n="7_4" href="dev-data-view.xhtml">扩展数据模型调试窗口</a>
			</li>
			<li>
				<a c:i18n="7_5" href="dev-translator.xhtml">创建新的运行环境</a>
			</li>
		</ul>
	</div>
</div>
		<div class="dialog">
	<div class="mask"></div>
	<div id="exampleRunner">
		<div class="head">
			===模板测试 ===
			<a class="close"
onclick="closeExample()">X</a>
		</div>
		<div class="jsonSource">
			<h5>数据模型</h5>
			<script>var jsonEditor = CodeMirror(placeMirror, {value: '',lineNumbers: true,mode: {name:"javascript",json:true}});</script>
		</div>
		<div class="templateSource">
			<h5>模板代码</h5>
			<script>var templateEditor = CodeMirror(placeMirror, {value: '',lineNumbers: true,mode: {name:"litexml"}});</script>
		</div>
		<div class="resultSource" id="exampleResult">
			<h5>结果输出</h5>
			<div id="resultLoader"></div>
			<div id="resultSource"></div>
		</div>
		<div class="toolbar">
			<input type="button" value="编译(JS)"
onclick="compileToJS()"/>
			<input type="button" value="编译(PHP)"
onclick="compileToPHP()"/>
			<input type="button" value="编译(NodeJS)"
onclick="compileToNodeJS()"/>
			<input type="button" title="lite" value="编译(Java)"
onclick="compileToLite()"/>
			<input type="button" id="runButton" disabled="disabled" value="运行(?)"
onclick="runTemplate()"/>
		</div>
	</div>
</div>
		
		<script>/*<![CDATA[*/var menu = document.getElementById('menu');var menuContent = menu.firstChild;menuContent = menuContent.nodeType==1 ?menuContent:menuContent.nextSibling;var as = document.body.getElementsByTagName('a');var height = menu.scrollHeight;for(var i = as.length;i--;){var a = as.item(i);if(/\bcurrent\b/.test(a.className)){var t= a.offsetTop;var bt = height - t;if(bt<120){menuContent.scrollTop = -bt+Math.min(150,height/3)+15}} }//]]></script>
	</body>
</html>