<!DOCTYPE html><html>
	<head>
		<title>输出语法</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
		<link href="default.css" rel="stylesheet" type="text/css"/>
		
		
	</head>
	<body>
		
		<style>
			.cm-lite-el{ color:#d30;}
			.cm-lite-tag{
			color:#9933FF;font-weight:bold;}
		</style>
		<script src="http://www.xidea.org/lite/codemirror/o.js"></script>
		<script src="editor.js"></script>
		<div id="main">
	<div id="header">
		<div class="logo"
onclick="location = 'http://www.xidea.org/lite/'">
			
				<div style="left:0px;top:0px;width:19px;height:100px;"> </div>
			
				<div style="left:0px;top:81px;width:42px;height:19px;"> </div>
			
				<div style="left:23px;top:0px;width:19px;height:19px;"> </div>
			
				<div style="left:23px;top:23px;width:19px;height:54px;"> </div>
			
				<div style="left:46px;top:0px;width:42px;height:19px;"> </div>
			
				<div style="left:46px;top:23px;width:19px;height:77px;"> </div>
			
				<div style="left:69px;top:81px;width:19px;height:19px;"> </div>
			
		</div>
		<h1>
			输出语法
		</h1>
		<div class="top-box">
			<div id="i18n">
				<span class="i18n_zh"
onclick="i18n_reload(&#34;zh&#34;)">中文</span>|
				<span class="i18n_en"
onclick="i18n_reload(&#34;en&#34;)">English</span>
				<div style="display:none">
				|<input type="checkbox" id="i18n_on" checked="checked"/>
				<label for="i18n_on" title="右键点击内容片段在弹出框输入翻译">翻译</label>
				</div>
				<script>/*<![CDATA[*/var cookie = ''+document.cookie;var i18n_lang = cookie.replace(/^.*\bi18n_lang=([\w]+).*$/,'$1');if(i18n_lang == cookie){i18n_lang = 'cn'}function i18n_reload(i18n_lang){document.cookie = 'i18n_lang='+i18n_lang;location.reload();}document.getElementById('i18n').className ='i18n_'+ i18n_lang;var i18n_on = document.getElementById('i18n_on')document.body.oncontextmenu=function(event){if(i18n_on.checked ||true){var event = event || window.event;var src = event.target || event.srcElement;var id = src.getAttribute('data-i18n-key');if(id){var oldvalue = src.innerHTML;var value = prompt('更正翻译('+i18n_lang+')：',oldvalue);if(value && value != oldvalue){var data = 'i18n_action=save&i18n_id='+encodeURIComponent(id)+'&i18n_value='+encodeURIComponent(value);postData(location.href,data,function(){src.innerHTML = value;});}return false;}	}}//]]></script>
			</div>
			<div class="test"><a href="../test.xhtml">查看测试报表</a></div>
		</div>
		<div class="line"></div>
	</div>
	<div id="content">
		
		<h3>功能支持</h3>
		<ul>
			<li>表达式输出
				<p>将模板变量或表达式运算值按照指定规则输出。</p>
			</li>
			<li>日期格式化输出
				<p>一种跨平台统一的日期格式化模式：<a href="syntax-date.xhtml">syntax-date.xhtml</a>。</p>
			</li>
		</ul>
		<h3>表达式输出</h3>
		<p>
			输出动态数据是模板最基本的功能，Lite可以将表达式的值，通过如下三种方式输出：</p>
		<ul>
			<li>
				<strong>HTML/XML自动编码输出（${...}）。</strong>
				<p>
					在HTML/XML文本中，为了确保代码安全性， XML保留字符
					<strong>(&lt;&amp;)</strong>
					和属性中的
					<strong>(")</strong>
					都将被自动转义；
				</p>
				<p>
					脚本/资源地址中的表达式，将自动加上JSON.stringify和encodeURIComponent。
					</p>
				<p>
					关于自动编码的详细介绍，请参考：
					<a href="feature-autoencode.xhtml">自动编码特性介绍</a>
				</p>
				<p>
					自动编码的表达式，如果是属性的单一值，他还具备一个隐含的特设功能：条件属性输出！
					<i>
						<p>
							在XML 属性中，如果属性值为单一表达式且运行时表达式值为
							<strong>null</strong>，则整个属性不输出，否则自动按xml属性的编码规则(&lt;&amp;和
							<strong>"</strong>
							)，编码XML属性内容并输出。

							这点在html 定值属性（如：disabled/checked/selected/...）输出时非常有用。
						</p>
					</i>
				</p>

			</li>
			<li>
				<strong>避免过度转义的安全输出（$#{...}）。</strong>
				<p>有的时候，特别是老的GBK中文环境下，我们数据库中存储有字符实体(如：&amp;#0x7C21;&amp;#0x7E41;);
					默认的自动编码输出，在这些数据的输出展现的时候，不能直接用完全编码输出的方式。</p>
			</li>
			<li>
				<strong>XSS风险自负的直接输出（$!{...}）。</strong>
				<p>慎用！！！</p>
			</li>
		</ul>
		<h3>日期格式化输出语法</h3>
		<p>
			该详细功能请参考独立文档：<a href="syntax-date.xhtml">syntax-date.xhtml</a>
		</p>
				
		<h3>示例</h3>
		<ul>
			<script>blogModel="{\u000a	author:{\u000a		//百度曾碰到过的严重xss漏洞。用户名带有关键字，导致该用户去哪哪瘫痪！\u000a		username:\u0027危险分子 \u003cscript>\u0027,\u000a		//打破属性规则，插入危险代码\u000a		title:\u0027坏蛋！ \u0022 onclick=\u0022alert(\u005c\u0027插入危险代码成功!!\u005c\u0027)\u0027,\u000a		disabled:false\u000a	},\u000a	blog:{\u000a		\u0027title\u0027:\u0027html特殊字符：&\u003c\u0022\u0027,\u000a		\u0027content\u0027:\u0027lite应该怎么自动编码这些特殊字符呢？\u0027+\u000a				\u0027XML特殊字符有两个:&\u003c，加上属性括弧\u0022,一共三个\u0027+\u000a				\u0027（LiteXML属性括弧一律自动转化为\u0022）；\u0027+\u000a				\u0027只要编码好这些特殊字符，用户就很难插入危险代码了。\u005cn\u005cn\u0027+\u000a				\u0027但是，有的时候，特别是老的GBK中文环境下，我们数据库中存储有字符实体，比如：&#0x7C21;&#0x7E41;&#0x6F22;&#0x5B57;。\u0027+\u000a				\u0027我们还要让这些字符实体不过度转义。\u0027\u000a	}\u000a}";</script>

			<div class='code'><script>renderSource("\u003c!-- 自动编码，免遭一劫 -->\u000a\u003cspan class=\u0022user\u0022 title=\u0022${author.title}\u0022>${author.username}\u003c/span>\u000a\u000a....\u000a\u003c!-- 条件属性就是方便（如果属性值为null，则整个属性不输出） -->\u000a\u003cinput type=\u0022submit\u0022 value=\u0022发表留言\u0022 disabled=\u0022${author.disabled||null}\u0022/>\u000a\u000a\u000a		\u000a\u003c!-- ${blog.title} 将按属性规则编码，确保不打破属性语义。 -->\u000a\u003c!-- ${blog.content} 将按属性xml文本编码，确保不被插入危险标签。 -->\u000a\u003cp title=\u0022${blog.title}\u0022>${blog.content}\u003c/p>\u000a\u003c!-- 避免过度转义： 网开一面的$#{...} 语法！-->\u000a\u003cp title=\u0022${blog.title}\u0022>$#{blog.content}\u003c/p>\u000a\u000a\u003c!-- 不建议的危险代码 ,用户可以为所欲为，插入任意代码了！-->\u000a\u003cp title=\u0022$!{blog.title}\u0022>$!{blog.content}\u003c/p>",blogModel,'');</script></div>
		</ul>
	
		<div id="post">

	<div class="ds-thread"></div>
<script type="text/javascript">var duoshuoQuery = {short_name:"lite"};(function() {var ds = document.createElement('script');ds.type = 'text/javascript';ds.async = true;ds.src = 'http://static.duoshuo.com/embed.js';ds.charset = 'UTF-8';(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);})();</script>

</div>
	</div>
	<div id="footer"></div>
</div>
		<div id="menu">
	<div class="menuInner">
		<h3 c:i18n="0">入门</h3>
		<ul>
			<li>
				<a c:i18n="0_1" href="index.xhtml">Lite模板简介</a>
			</li>
			<li>
				<a c:i18n="0_2" href="install.xhtml">测试与安装</a>
			</li>
		</ul>

		<h3 c:i18n="1">表达式参考</h3>
		<ul>
			<li>
				<a c:i18n="1_1" href="el.xhtml">什么是表达式</a>
			</li>
			<li>
				<a c:i18n="1_2" href="el-value.xhtml">变量/原子值/复合值</a>
			</li>
			<li>
				<a c:i18n="1_3" href="el-op.xhtml">操作符与函数</a>
			</li>
			<li>
				<a c:i18n="1_4" href="el-function.xhtml">内置函数参考</a>
			</li>
		</ul>

		<h3 c:i18n="2">核心模板语法参考</h3>
		<ul>
			
			<li>
				<a c:i18n="2_1" href="syntax-out.xhtml" class=" current">输出语法[${},$!{},$#{},日期]</a>
			</li>
			<li>
				<a c:i18n="2_2" href="syntax-if.xhtml">条件判断[c:if]</a>
			</li>
			<li>
				<a c:i18n="2_3" href="syntax-choose.xhtml">分支选择[c:choose]</a>
			</li>
			<li>
				<a c:i18n="2_4" href="syntax-for.xhtml">四种循环[c:for]</a>
			</li>
			<li>
				<a c:i18n="2_5" href="syntax-extends.xhtml">模板继承[c:extends]</a>
			</li>
			<li>
				<a c:i18n="2_6" href="syntax-include.xhtml">静态包含[c:include]</a>
			</li>
			<li>
				<a c:i18n="2_7" href="syntax-var.xhtml">变量申明[c:var]</a>
			</li>
			<li>
				<a c:i18n="2_8" href="syntax-def.xhtml">模板函数申明[c:def]</a>
			</li>
			<li>
				<a c:i18n="2_9" href="syntax-extension.xhtml">自定义扩展[c:extension]</a>
			</li>
		</ul>

		<h3 c:i18n="3">XML/HTML相关语法参考</h3>
		<ul>
			<li>
				<a c:i18n="3_1" href="syntax-trim.xhtml">注释/语法空格控制[h:trim]</a>
			</li>
			<li>
				<a c:i18n="3_2" href="syntax-client.xhtml">前端模板函数申明[h:client]</a>
			</li>
			<li>
				<a c:i18n="3_3" href="syntax-autoform.xhtml">自动表单[h:autofrom]</a>
			</li>
			<li>
				<a c:i18n="3_4" href="feature-autoencode.xhtml">自动编码</a>
			</li>
			<li>
				<a c:i18n="3_5" href="feature-xml.xhtml" title="标记语言特有的语法，如：条件属性,自动编码,自动语义补全等...">其他特性</a>
			</li>
		</ul>
		<h3 c:i18n="4">开发调试辅助</h3>
		<ul>
			<li>
				<a c:i18n="4_1" href="debug-model.xhtml">查看数据模型</a>
			</li>
			<li>
				<a c:i18n="4_2" href="debug-log.xhtml">查看编译日志</a>
			</li>
		</ul>
		<h3 c:i18n="5">编译打包</h3>
		<ul>
			<li>
				<a c:i18n="5_1" href="compiler-cmd.xhtml">批量编译</a>
			</li>
			<li>
				<a c:i18n="5_2" href="compiler-spec.xhtml">编译规范</a>
			</li>
			<li>
				<a c:i18n="5_3" href="compiler-api.xhtml">自定义编译</a>
			</li>
		</ul>
		<h3 c:i18n="6">常见问题</h3>
		<ul>
			<li>
				<a c:i18n="6_1" href="faq-newer.xhtml">致初学者</a>
			</li>
			<li>
				<a c:i18n="6_2" href="faq-badcase.xhtml">常犯错误</a>
			</li>
			<li>
				<a c:i18n="6_3" href="faq-plan.xhtml">开发计划</a>
			</li>
		</ul>
		<h3 c:i18n="7">二次开发参考</h3>
		<ul>
			<li>
				<a c:i18n="7_1" href="dev-function.xhtml">扩展运行时函数(PHP)</a>
			</li>
			<li>
				<a c:i18n="7_2" href="dev-function.xhtml">扩展运行时函数(Java)</a>
			</li>
			<li>
				<a c:i18n="7_3" href="dev-extension.xhtml">扩展模板语法</a>
			</li>
			<li>
				<a c:i18n="7_4" href="dev-data-view.xhtml">扩展数据模型调试窗口</a>
			</li>
			<li>
				<a c:i18n="7_5" href="dev-translator.xhtml">创建新的运行环境</a>
			</li>
		</ul>
	</div>
</div>
		<div class="dialog">
	<div class="mask"></div>
	<div id="exampleRunner">
		<div class="head">
			===模板测试 ===
			<a class="close"
onclick="closeExample()">X</a>
		</div>
		<div class="jsonSource">
			<h5>数据模型</h5>
			<script>var jsonEditor = CodeMirror(placeMirror, {value: '',lineNumbers: true,mode: {name:"javascript",json:true}});</script>
		</div>
		<div class="templateSource">
			<h5>模板代码</h5>
			<script>var templateEditor = CodeMirror(placeMirror, {value: '',lineNumbers: true,mode: {name:"litexml"}});</script>
		</div>
		<div class="resultSource" id="exampleResult">
			<h5>结果输出</h5>
			<div id="resultLoader"></div>
			<div id="resultSource"></div>
		</div>
		<div class="toolbar">
			<input type="button" value="编译(JS)"
onclick="compileToJS()"/>
			<input type="button" value="编译(PHP)"
onclick="compileToPHP()"/>
			<input type="button" value="编译(NodeJS)"
onclick="compileToNodeJS()"/>
			<input type="button" title="lite" value="编译(Java)"
onclick="compileToLite()"/>
			<input type="button" id="runButton" disabled="disabled" value="运行(?)"
onclick="runTemplate()"/>
		</div>
	</div>
</div>
		
		<script>/*<![CDATA[*/var menu = document.getElementById('menu');var menuContent = menu.firstChild;menuContent = menuContent.nodeType==1 ?menuContent:menuContent.nextSibling;var as = document.body.getElementsByTagName('a');var height = menu.scrollHeight;for(var i = as.length;i--;){var a = as.item(i);if(/\bcurrent\b/.test(a.className)){var t= a.offsetTop;var bt = height - t;if(bt<120){menuContent.scrollTop = -bt+Math.min(150,height/3)+15}} }//]]></script>
	</body>
</html>